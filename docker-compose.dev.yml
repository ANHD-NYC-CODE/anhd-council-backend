version: "2"
services:
  app:
    links:
      - postgres
    depends_on:
      - postgres
    stdin_open: true # for debugging w/ "docker attach app"
    tty: true # for debugging w/ "docker attach app"
    entrypoint: ["sh", "/app/docker-entrypoint.dev.sh"]
    env_file:
      - .env.dev
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.development
  celery_default:
    restart: always
    build: .
    container_name: "celery_default"
    image: app_image
    networks:
      - network1
    links:
      - redis
      - postgres
      - app
    depends_on:
      - postgres
      - redis
      - celerybeat
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./celery:/app/celery
    env_file:
      - .env.dev
    entrypoint: "celery -A app worker -E -Q celery -l debug -n celery_worker --concurrency=8 --logfile=./celery/logs/default.log"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  celery_update:
    restart: always
    build: .
    container_name: "celery_update"
    image: app_image
    networks:
      - network1
    depends_on:
      - postgres
      - redis
      - celerybeat
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
      - ./celery/logs:/app/celery/logs
    links:
      - postgres
      - redis
      - app
    env_file:
      - .env.dev
    entrypoint: "celery -A app worker -E -Q update -l debug -n update_worker --concurrency=8 --logfile=./celery/logs/update.log"
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  celerybeat:
    restart: always
    build: .
    container_name: "celerybeat"
    image: app_image
    entrypoint: "celery -A app beat -l debug --scheduler django_celery_beat.schedulers:DatabaseScheduler --logfile=./celery/logs/beat.log"
    networks:
      - network1
    depends_on:
      - postgres
      - redis
    links:
      - postgres
      - redis
    volumes:
      - ./:/app
      - ./celery:/app/celery
    env_file:
      - .env.dev
    # https://www.distributedpython.com/2018/10/13/flower-docker/
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  flower:
    ports:
      - "8888:8888"
  redis:
    ports:
      - "6379:6379"
  postgres:
    image: postgres:11
    container_name: "postgres"
    restart: on-failure
      # https://blog.2ndquadrant.com/basics-of-tuning-checkpoints/
      # linux OOM overcommit https://www.postgresql.org/docs/current/kernel-resources.html#LINUX-MEMORY-OVERCOMMIT
    command:
      [
        "-c",
        "autovacuum_vacuum_scale_factor=0.05",
        "-c",
        "vacuum_cost_page_hit=1",
        "-c",
        "vacuum_cost_page_miss=10",
        "-c",
        "vacuum_cost_page_dirty=20",
        "-c",
        "autovacuum_vacuum_cost_delay=20ms",
        "-c",
        "autovacuum_vacuum_cost_limit=1000",
        "-c",
        "enable_seqscan=ON",
        "-c",
        "huge_pages=try",
        "-c",
        "effective_io_concurrency=1",
        "-c",
        "max_parallel_workers_per_gather=4",
        "-c",
        "dynamic_shared_memory_type=posix",
        "-c",
        "max_stack_depth=6MB",
        "-c",
        "maintenance_work_mem=1GB",
        "-c",
        "temp_buffers=64MB",
        "-c",
        "shared_buffers=4GB",
        "-c",
        "default_statistics_target=1000",
        "-c",
        "checkpoint_timeout=120min",
        "-c",
        "checkpoint_completion_target=0.93",
        "-c",
        "max_wal_size=6GB",
        "-c",
        "effective_cache_size=8GB",
        "-c",
        "work_mem=600MB",
        "-c",
        "max_connections=200",
        "-c",
        "random_page_cost=1.05",
        "-c",
        "seq_page_cost=2",
        "-c",
        "log_min_duration_statement=10000",
        "-c",
        "log_temp_files=1",
      ]
    shm_size: "2GB"
    environment:
      POSTGRES_DB: anhd
      POSTGRES_USER: anhd
      POSTGRES_HOST_AUTH_METHOD: trust # fixes error: “Error: Database is uninitialized and superuser password is not specified.”
    ports:
      - "5432:5432"
    networks:
      - network1
    volumes:
      - pg_vol1:/var/lib/postgresql/data
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  nginx:
  certbot:
volumes:
  pg_vol1:
