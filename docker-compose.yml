version: "2"
services:
  app:
    restart: always
    build: .
    expose:
      - "8000"
    container_name: "app"
    # image: debian/latest
    image: app_image
    links:
      - postgres
      - redis
    depends_on:
      - postgres
      - redis
    ports:
      - "8000:8000"
    networks:
      - network1
      - nginx_network
    volumes:
      - ./:/app
      - ./data:/app/data
      - static_volume:/app/static
      - ./logs:/app/logs
    entrypoint: ["sh", "/app/docker-entrypoint.sh"]
    env_file:
      - .env
    environment:
      - DJANGO_SETTINGS_MODULE=app.settings.production
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  flower:
    image: mher/flower
    container_name: "flower"
    expose:
      - "8888"
    environment:
      - CELERY_BROKER_URL=redis://redis
      - FLOWER_PORT=8888
    networks:
      - network1
      - nginx_network
    depends_on:
      - redis
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  redis:
    restart: always
    hostname: redis
    container_name: "redis"
    image: redis:alpine
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - network1
    env_file:
      - .env
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  nginx:
    build: ./nginx
    container_name: "nginx_server"
    # https://medium.com/@pentacent/nginx-and-lets-encrypt-with-docker-in-less-than-5-minutes-b4b8a60d3a71
    logging:
      options:
        max-size: "10m"
        max-file: "3"
  certbot:
    container_name: "certbot"
    image: certbot/certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    depends_on:
      - nginx
    logging:
      options:
        max-size: "10m"
        max-file: "3"
volumes:
  redis_data:
  static_volume:
networks:
  network1:
  nginx_network:
    driver: bridge
